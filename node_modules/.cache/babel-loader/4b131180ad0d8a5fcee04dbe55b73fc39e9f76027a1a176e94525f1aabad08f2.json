{"ast":null,"code":"import PostgrestTransformBuilder from './PostgrestTransformBuilder';\nexport default class PostgrestFilterBuilder extends PostgrestTransformBuilder {\n  /**\r\n   * Match only rows where `column` is equal to `value`.\r\n   *\r\n   * To check if the value of `column` is NULL, you should use `.is()` instead.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n  eq(column, value) {\n    this.url.searchParams.append(column, `eq.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` is not equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n  neq(column, value) {\n    this.url.searchParams.append(column, `neq.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` is greater than `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n  gt(column, value) {\n    this.url.searchParams.append(column, `gt.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` is greater than or equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n  gte(column, value) {\n    this.url.searchParams.append(column, `gte.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` is less than `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n  lt(column, value) {\n    this.url.searchParams.append(column, `lt.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` is less than or equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n  lte(column, value) {\n    this.url.searchParams.append(column, `lte.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` matches `pattern` case-sensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param pattern - The pattern to match with\r\n   */\n  like(column, pattern) {\n    this.url.searchParams.append(column, `like.${pattern}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` matches `pattern` case-insensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param pattern - The pattern to match with\r\n   */\n  ilike(column, pattern) {\n    this.url.searchParams.append(column, `ilike.${pattern}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` IS `value`.\r\n   *\r\n   * For non-boolean columns, this is only relevant for checking if the value of\r\n   * `column` is NULL by setting `value` to `null`.\r\n   *\r\n   * For boolean columns, you can also set `value` to `true` or `false` and it\r\n   * will behave the same way as `.eq()`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\n  is(column, value) {\n    this.url.searchParams.append(column, `is.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where `column` is included in the `values` array.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param values - The values array to filter with\r\n   */\n  in(column, values) {\n    const cleanedValues = values.map(s => {\n      // handle postgrest reserved characters\n      // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n      if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`;else return `${s}`;\n    }).join(',');\n    this.url.searchParams.append(column, `in.(${cleanedValues})`);\n    return this;\n  }\n  /**\r\n   * Only relevant for jsonb, array, and range columns. Match only rows where\r\n   * `column` contains every element appearing in `value`.\r\n   *\r\n   * @param column - The jsonb, array, or range column to filter on\r\n   * @param value - The jsonb, array, or range value to filter with\r\n   */\n  contains(column, value) {\n    if (typeof value === 'string') {\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n      // keep it simple and accept a string\n      this.url.searchParams.append(column, `cs.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cs.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);\n    }\n    return this;\n  }\n  /**\r\n   * Only relevant for jsonb, array, and range columns. Match only rows where\r\n   * every element appearing in `column` is contained by `value`.\r\n   *\r\n   * @param column - The jsonb, array, or range column to filter on\r\n   * @param value - The jsonb, array, or range value to filter with\r\n   */\n  containedBy(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `cd.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cd.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);\n    }\n    return this;\n  }\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is greater than any element in `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\n  rangeGt(column, range) {\n    this.url.searchParams.append(column, `sr.${range}`);\n    return this;\n  }\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is either contained in `range` or greater than any element in\r\n   * `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\n  rangeGte(column, range) {\n    this.url.searchParams.append(column, `nxl.${range}`);\n    return this;\n  }\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is less than any element in `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\n  rangeLt(column, range) {\n    this.url.searchParams.append(column, `sl.${range}`);\n    return this;\n  }\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is either contained in `range` or less than any element in\r\n   * `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\n  rangeLte(column, range) {\n    this.url.searchParams.append(column, `nxr.${range}`);\n    return this;\n  }\n  /**\r\n   * Only relevant for range columns. Match only rows where `column` is\r\n   * mutually exclusive to `range` and there can be no element between the two\r\n   * ranges.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\n  rangeAdjacent(column, range) {\n    this.url.searchParams.append(column, `adj.${range}`);\n    return this;\n  }\n  /**\r\n   * Only relevant for array and range columns. Match only rows where\r\n   * `column` and `value` have an element in common.\r\n   *\r\n   * @param column - The array or range column to filter on\r\n   * @param value - The array or range value to filter with\r\n   */\n  overlaps(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `ov.${value}`);\n    } else {\n      // array\n      this.url.searchParams.append(column, `ov.{${value.join(',')}}`);\n    }\n    return this;\n  }\n  /**\r\n   * Only relevant for text and tsvector columns. Match only rows where\r\n   * `column` matches the query string in `query`.\r\n   *\r\n   * @param column - The text or tsvector column to filter on\r\n   * @param query - The query text to match with\r\n   * @param options - Named parameters\r\n   * @param options.config - The text search configuration to use\r\n   * @param options.type - Change how the `query` text is interpreted\r\n   */\n  textSearch(column, query) {\n    let {\n      config,\n      type\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let typePart = '';\n    if (type === 'plain') {\n      typePart = 'pl';\n    } else if (type === 'phrase') {\n      typePart = 'ph';\n    } else if (type === 'websearch') {\n      typePart = 'w';\n    }\n    const configPart = config === undefined ? '' : `(${config})`;\n    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);\n    return this;\n  }\n  /**\r\n   * Match only rows where each column in `query` keys is equal to its\r\n   * associated value. Shorthand for multiple `.eq()`s.\r\n   *\r\n   * @param query - The object to filter with, with column names as keys mapped\r\n   * to their filter values\r\n   */\n  match(query) {\n    Object.entries(query).forEach(_ref => {\n      let [column, value] = _ref;\n      this.url.searchParams.append(column, `eq.${value}`);\n    });\n    return this;\n  }\n  /**\r\n   * Match only rows which doesn't satisfy the filter.\r\n   *\r\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\r\n   * follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure they are properly sanitized.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param operator - The operator to be negated to filter with, following\r\n   * PostgREST syntax\r\n   * @param value - The value to filter with, following PostgREST syntax\r\n   */\n  not(column, operator, value) {\n    this.url.searchParams.append(column, `not.${operator}.${value}`);\n    return this;\n  }\n  /**\r\n   * Match only rows which satisfy at least one of the filters.\r\n   *\r\n   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure it's properly sanitized.\r\n   *\r\n   * It's currently not possible to do an `.or()` filter across multiple tables.\r\n   *\r\n   * @param filters - The filters to use, following PostgREST syntax\r\n   * @param foreignTable - Set this to filter on foreign tables instead of the\r\n   * current table\r\n   */\n  or(filters) {\n    let {\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = foreignTable ? `${foreignTable}.or` : 'or';\n    this.url.searchParams.append(key, `(${filters})`);\n    return this;\n  }\n  /**\r\n   * Match only rows which satisfy the filter. This is an escape hatch - you\r\n   * should use the specific filter methods wherever possible.\r\n   *\r\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\r\n   * follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure they are properly sanitized.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param operator - The operator to filter with, following PostgREST syntax\r\n   * @param value - The value to filter with, following PostgREST syntax\r\n   */\n  filter(column, operator, value) {\n    this.url.searchParams.append(column, `${operator}.${value}`);\n    return this;\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAOA,yBAAyB,MAAM,6BAA6B;AA2BnE,eAAc,MAAOC,sBAInB,SAAQD,yBAA8C;EAGtD;;;;;;;;EAQAE,EAAE,CAACC,MAAc,EAAEC,KAAc;IAC/B,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,MAAMC,KAAK,EAAE,CAAC;IACnD,OAAO,IAAI;EACb;EAIA;;;;;;EAMAI,GAAG,CAACL,MAAc,EAAEC,KAAc;IAChC,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,OAAOC,KAAK,EAAE,CAAC;IACpD,OAAO,IAAI;EACb;EAIA;;;;;;EAMAK,EAAE,CAACN,MAAc,EAAEC,KAAc;IAC/B,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,MAAMC,KAAK,EAAE,CAAC;IACnD,OAAO,IAAI;EACb;EAIA;;;;;;EAMAM,GAAG,CAACP,MAAc,EAAEC,KAAc;IAChC,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,OAAOC,KAAK,EAAE,CAAC;IACpD,OAAO,IAAI;EACb;EAIA;;;;;;EAMAO,EAAE,CAACR,MAAc,EAAEC,KAAc;IAC/B,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,MAAMC,KAAK,EAAE,CAAC;IACnD,OAAO,IAAI;EACb;EAIA;;;;;;EAMAQ,GAAG,CAACT,MAAc,EAAEC,KAAc;IAChC,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,OAAOC,KAAK,EAAE,CAAC;IACpD,OAAO,IAAI;EACb;EAIA;;;;;;EAMAS,IAAI,CAACV,MAAc,EAAEW,OAAe;IAClC,IAAI,CAACT,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,QAAQW,OAAO,EAAE,CAAC;IACvD,OAAO,IAAI;EACb;EAIA;;;;;;EAMAC,KAAK,CAACZ,MAAc,EAAEW,OAAe;IACnC,IAAI,CAACT,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,SAASW,OAAO,EAAE,CAAC;IACxD,OAAO,IAAI;EACb;EAOA;;;;;;;;;;;;EAYAE,EAAE,CAACb,MAAc,EAAEC,KAAqB;IACtC,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,MAAMC,KAAK,EAAE,CAAC;IACnD,OAAO,IAAI;EACb;EAIA;;;;;;EAMAa,EAAE,CAACd,MAAc,EAAEe,MAAiB;IAClC,MAAMC,aAAa,GAAGD,MAAM,CACzBE,GAAG,CAAEC,CAAC,IAAI;MACT;MACA;MACA,IAAI,OAAOA,CAAC,KAAK,QAAQ,IAAI,IAAIC,MAAM,CAAC,OAAO,CAAC,CAACC,IAAI,CAACF,CAAC,CAAC,EAAE,OAAO,IAAIA,CAAC,GAAG,MACpE,OAAO,GAAGA,CAAC,EAAE;IACpB,CAAC,CAAC,CACDG,IAAI,CAAC,GAAG,CAAC;IACZ,IAAI,CAACnB,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,OAAOgB,aAAa,GAAG,CAAC;IAC7D,OAAO,IAAI;EACb;EAOA;;;;;;;EAOAM,QAAQ,CAACtB,MAAc,EAAEC,KAAmD;IAC1E,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B;MACA;MACA,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,MAAMC,KAAK,EAAE,CAAC;KACpD,MAAM,IAAIsB,KAAK,CAACC,OAAO,CAACvB,KAAK,CAAC,EAAE;MAC/B;MACA,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,OAAOC,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;KAChE,MAAM;MACL;MACA,IAAI,CAACnB,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,MAAMyB,IAAI,CAACC,SAAS,CAACzB,KAAK,CAAC,EAAE,CAAC;;IAErE,OAAO,IAAI;EACb;EAOA;;;;;;;EAOA0B,WAAW,CAAC3B,MAAc,EAAEC,KAAmD;IAC7E,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B;MACA,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,MAAMC,KAAK,EAAE,CAAC;KACpD,MAAM,IAAIsB,KAAK,CAACC,OAAO,CAACvB,KAAK,CAAC,EAAE;MAC/B;MACA,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,OAAOC,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;KAChE,MAAM;MACL;MACA,IAAI,CAACnB,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,MAAMyB,IAAI,CAACC,SAAS,CAACzB,KAAK,CAAC,EAAE,CAAC;;IAErE,OAAO,IAAI;EACb;EAIA;;;;;;;EAOA2B,OAAO,CAAC5B,MAAc,EAAE6B,KAAa;IACnC,IAAI,CAAC3B,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,MAAM6B,KAAK,EAAE,CAAC;IACnD,OAAO,IAAI;EACb;EAIA;;;;;;;;EAQAC,QAAQ,CAAC9B,MAAc,EAAE6B,KAAa;IACpC,IAAI,CAAC3B,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,OAAO6B,KAAK,EAAE,CAAC;IACpD,OAAO,IAAI;EACb;EAIA;;;;;;;EAOAE,OAAO,CAAC/B,MAAc,EAAE6B,KAAa;IACnC,IAAI,CAAC3B,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,MAAM6B,KAAK,EAAE,CAAC;IACnD,OAAO,IAAI;EACb;EAIA;;;;;;;;EAQAG,QAAQ,CAAChC,MAAc,EAAE6B,KAAa;IACpC,IAAI,CAAC3B,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,OAAO6B,KAAK,EAAE,CAAC;IACpD,OAAO,IAAI;EACb;EAIA;;;;;;;;EAQAI,aAAa,CAACjC,MAAc,EAAE6B,KAAa;IACzC,IAAI,CAAC3B,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,OAAO6B,KAAK,EAAE,CAAC;IACpD,OAAO,IAAI;EACb;EAOA;;;;;;;EAOAK,QAAQ,CAAClC,MAAc,EAAEC,KAAyB;IAChD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B;MACA,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,MAAMC,KAAK,EAAE,CAAC;KACpD,MAAM;MACL;MACA,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,OAAOC,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;;IAEjE,OAAO,IAAI;EACb;EAYA;;;;;;;;;;EAUAc,UAAU,CACRnC,MAAc,EACdoC,KAAa,EACsE;IAAA,IAAnF;MAAEC,MAAM;MAAEC;IAAI,wEAAmE,EAAE;IAEnF,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAID,IAAI,KAAK,OAAO,EAAE;MACpBC,QAAQ,GAAG,IAAI;KAChB,MAAM,IAAID,IAAI,KAAK,QAAQ,EAAE;MAC5BC,QAAQ,GAAG,IAAI;KAChB,MAAM,IAAID,IAAI,KAAK,WAAW,EAAE;MAC/BC,QAAQ,GAAG,GAAG;;IAEhB,MAAMC,UAAU,GAAGH,MAAM,KAAKI,SAAS,GAAG,EAAE,GAAG,IAAIJ,MAAM,GAAG;IAC5D,IAAI,CAACnC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,GAAGuC,QAAQ,MAAMC,UAAU,IAAIJ,KAAK,EAAE,CAAC;IAC5E,OAAO,IAAI;EACb;EAIA;;;;;;;EAOAM,KAAK,CAACN,KAA8B;IAClCO,MAAM,CAACC,OAAO,CAACR,KAAK,CAAC,CAACS,OAAO,CAAC,QAAoB;MAAA,IAAnB,CAAC7C,MAAM,EAAEC,KAAK,CAAC;MAC5C,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,MAAMC,KAAK,EAAE,CAAC;IACrD,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EAQA;;;;;;;;;;;;;EAaA6C,GAAG,CAAC9C,MAAc,EAAE+C,QAAgB,EAAE9C,KAAc;IAClD,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,OAAO+C,QAAQ,IAAI9C,KAAK,EAAE,CAAC;IAChE,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;EAaA+C,EAAE,CAACC,OAAe,EAAkD;IAAA,IAAhD;MAAEC;IAAY,wEAAgC,EAAE;IAClE,MAAMC,GAAG,GAAGD,YAAY,GAAG,GAAGA,YAAY,KAAK,GAAG,IAAI;IACtD,IAAI,CAAChD,GAAG,CAACC,YAAY,CAACC,MAAM,CAAC+C,GAAG,EAAE,IAAIF,OAAO,GAAG,CAAC;IACjD,OAAO,IAAI;EACb;EAQA;;;;;;;;;;;;;EAaAG,MAAM,CAACpD,MAAc,EAAE+C,QAAgB,EAAE9C,KAAc;IACrD,IAAI,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAACJ,MAAM,EAAE,GAAG+C,QAAQ,IAAI9C,KAAK,EAAE,CAAC;IAC5D,OAAO,IAAI;EACb","names":["PostgrestTransformBuilder","PostgrestFilterBuilder","eq","column","value","url","searchParams","append","neq","gt","gte","lt","lte","like","pattern","ilike","is","in","values","cleanedValues","map","s","RegExp","test","join","contains","Array","isArray","JSON","stringify","containedBy","rangeGt","range","rangeGte","rangeLt","rangeLte","rangeAdjacent","overlaps","textSearch","query","config","type","typePart","configPart","undefined","match","Object","entries","forEach","not","operator","or","filters","foreignTable","key","filter"],"sources":["C:\\Users\\recar\\Documents\\GitHub\\TILProject\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestFilterBuilder.ts"],"sourcesContent":["import PostgrestTransformBuilder from './PostgrestTransformBuilder'\r\nimport { GenericSchema } from './types'\r\n\r\ntype FilterOperator =\r\n  | 'eq'\r\n  | 'neq'\r\n  | 'gt'\r\n  | 'gte'\r\n  | 'lt'\r\n  | 'lte'\r\n  | 'like'\r\n  | 'ilike'\r\n  | 'is'\r\n  | 'in'\r\n  | 'cs'\r\n  | 'cd'\r\n  | 'sl'\r\n  | 'sr'\r\n  | 'nxl'\r\n  | 'nxr'\r\n  | 'adj'\r\n  | 'ov'\r\n  | 'fts'\r\n  | 'plfts'\r\n  | 'phfts'\r\n  | 'wfts'\r\n\r\nexport default class PostgrestFilterBuilder<\r\n  Schema extends GenericSchema,\r\n  Row extends Record<string, unknown>,\r\n  Result\r\n> extends PostgrestTransformBuilder<Schema, Row, Result> {\r\n  eq<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  eq(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is equal to `value`.\r\n   *\r\n   * To check if the value of `column` is NULL, you should use `.is()` instead.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  eq(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `eq.${value}`)\r\n    return this\r\n  }\r\n\r\n  neq<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  neq(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is not equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  neq(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `neq.${value}`)\r\n    return this\r\n  }\r\n\r\n  gt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  gt(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is greater than `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  gt(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `gt.${value}`)\r\n    return this\r\n  }\r\n\r\n  gte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  gte(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is greater than or equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  gte(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `gte.${value}`)\r\n    return this\r\n  }\r\n\r\n  lt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  lt(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is less than `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  lt(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `lt.${value}`)\r\n    return this\r\n  }\r\n\r\n  lte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  lte(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is less than or equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  lte(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `lte.${value}`)\r\n    return this\r\n  }\r\n\r\n  like<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\r\n  like(column: string, pattern: string): this\r\n  /**\r\n   * Match only rows where `column` matches `pattern` case-sensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param pattern - The pattern to match with\r\n   */\r\n  like(column: string, pattern: string): this {\r\n    this.url.searchParams.append(column, `like.${pattern}`)\r\n    return this\r\n  }\r\n\r\n  ilike<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\r\n  ilike(column: string, pattern: string): this\r\n  /**\r\n   * Match only rows where `column` matches `pattern` case-insensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param pattern - The pattern to match with\r\n   */\r\n  ilike(column: string, pattern: string): this {\r\n    this.url.searchParams.append(column, `ilike.${pattern}`)\r\n    return this\r\n  }\r\n\r\n  is<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    value: Row[ColumnName] & (boolean | null)\r\n  ): this\r\n  is(column: string, value: boolean | null): this\r\n  /**\r\n   * Match only rows where `column` IS `value`.\r\n   *\r\n   * For non-boolean columns, this is only relevant for checking if the value of\r\n   * `column` is NULL by setting `value` to `null`.\r\n   *\r\n   * For boolean columns, you can also set `value` to `true` or `false` and it\r\n   * will behave the same way as `.eq()`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  is(column: string, value: boolean | null): this {\r\n    this.url.searchParams.append(column, `is.${value}`)\r\n    return this\r\n  }\r\n\r\n  in<ColumnName extends string & keyof Row>(column: ColumnName, values: Row[ColumnName][]): this\r\n  in(column: string, values: unknown[]): this\r\n  /**\r\n   * Match only rows where `column` is included in the `values` array.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param values - The values array to filter with\r\n   */\r\n  in(column: string, values: unknown[]): this {\r\n    const cleanedValues = values\r\n      .map((s) => {\r\n        // handle postgrest reserved characters\r\n        // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\r\n        if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`\r\n        else return `${s}`\r\n      })\r\n      .join(',')\r\n    this.url.searchParams.append(column, `in.(${cleanedValues})`)\r\n    return this\r\n  }\r\n\r\n  contains<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    value: string | Row[ColumnName][] | Record<string, unknown>\r\n  ): this\r\n  contains(column: string, value: string | unknown[] | Record<string, unknown>): this\r\n  /**\r\n   * Only relevant for jsonb, array, and range columns. Match only rows where\r\n   * `column` contains every element appearing in `value`.\r\n   *\r\n   * @param column - The jsonb, array, or range column to filter on\r\n   * @param value - The jsonb, array, or range value to filter with\r\n   */\r\n  contains(column: string, value: string | unknown[] | Record<string, unknown>): this {\r\n    if (typeof value === 'string') {\r\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\r\n      // keep it simple and accept a string\r\n      this.url.searchParams.append(column, `cs.${value}`)\r\n    } else if (Array.isArray(value)) {\r\n      // array\r\n      this.url.searchParams.append(column, `cs.{${value.join(',')}}`)\r\n    } else {\r\n      // json\r\n      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`)\r\n    }\r\n    return this\r\n  }\r\n\r\n  containedBy<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    value: string | Row[ColumnName][] | Record<string, unknown>\r\n  ): this\r\n  containedBy(column: string, value: string | unknown[] | Record<string, unknown>): this\r\n  /**\r\n   * Only relevant for jsonb, array, and range columns. Match only rows where\r\n   * every element appearing in `column` is contained by `value`.\r\n   *\r\n   * @param column - The jsonb, array, or range column to filter on\r\n   * @param value - The jsonb, array, or range value to filter with\r\n   */\r\n  containedBy(column: string, value: string | unknown[] | Record<string, unknown>): this {\r\n    if (typeof value === 'string') {\r\n      // range\r\n      this.url.searchParams.append(column, `cd.${value}`)\r\n    } else if (Array.isArray(value)) {\r\n      // array\r\n      this.url.searchParams.append(column, `cd.{${value.join(',')}}`)\r\n    } else {\r\n      // json\r\n      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`)\r\n    }\r\n    return this\r\n  }\r\n\r\n  rangeGt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeGt(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is greater than any element in `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeGt(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `sr.${range}`)\r\n    return this\r\n  }\r\n\r\n  rangeGte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeGte(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is either contained in `range` or greater than any element in\r\n   * `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeGte(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `nxl.${range}`)\r\n    return this\r\n  }\r\n\r\n  rangeLt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeLt(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is less than any element in `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeLt(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `sl.${range}`)\r\n    return this\r\n  }\r\n\r\n  rangeLte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeLte(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is either contained in `range` or less than any element in\r\n   * `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeLte(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `nxr.${range}`)\r\n    return this\r\n  }\r\n\r\n  rangeAdjacent<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeAdjacent(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where `column` is\r\n   * mutually exclusive to `range` and there can be no element between the two\r\n   * ranges.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeAdjacent(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `adj.${range}`)\r\n    return this\r\n  }\r\n\r\n  overlaps<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    value: string | Row[ColumnName][]\r\n  ): this\r\n  overlaps(column: string, value: string | unknown[]): this\r\n  /**\r\n   * Only relevant for array and range columns. Match only rows where\r\n   * `column` and `value` have an element in common.\r\n   *\r\n   * @param column - The array or range column to filter on\r\n   * @param value - The array or range value to filter with\r\n   */\r\n  overlaps(column: string, value: string | unknown[]): this {\r\n    if (typeof value === 'string') {\r\n      // range\r\n      this.url.searchParams.append(column, `ov.${value}`)\r\n    } else {\r\n      // array\r\n      this.url.searchParams.append(column, `ov.{${value.join(',')}}`)\r\n    }\r\n    return this\r\n  }\r\n\r\n  textSearch<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    query: string,\r\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\r\n  ): this\r\n  textSearch(\r\n    column: string,\r\n    query: string,\r\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\r\n  ): this\r\n  /**\r\n   * Only relevant for text and tsvector columns. Match only rows where\r\n   * `column` matches the query string in `query`.\r\n   *\r\n   * @param column - The text or tsvector column to filter on\r\n   * @param query - The query text to match with\r\n   * @param options - Named parameters\r\n   * @param options.config - The text search configuration to use\r\n   * @param options.type - Change how the `query` text is interpreted\r\n   */\r\n  textSearch(\r\n    column: string,\r\n    query: string,\r\n    { config, type }: { config?: string; type?: 'plain' | 'phrase' | 'websearch' } = {}\r\n  ): this {\r\n    let typePart = ''\r\n    if (type === 'plain') {\r\n      typePart = 'pl'\r\n    } else if (type === 'phrase') {\r\n      typePart = 'ph'\r\n    } else if (type === 'websearch') {\r\n      typePart = 'w'\r\n    }\r\n    const configPart = config === undefined ? '' : `(${config})`\r\n    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`)\r\n    return this\r\n  }\r\n\r\n  match<ColumnName extends string & keyof Row>(query: Record<ColumnName, Row[ColumnName]>): this\r\n  match(query: Record<string, unknown>): this\r\n  /**\r\n   * Match only rows where each column in `query` keys is equal to its\r\n   * associated value. Shorthand for multiple `.eq()`s.\r\n   *\r\n   * @param query - The object to filter with, with column names as keys mapped\r\n   * to their filter values\r\n   */\r\n  match(query: Record<string, unknown>): this {\r\n    Object.entries(query).forEach(([column, value]) => {\r\n      this.url.searchParams.append(column, `eq.${value}`)\r\n    })\r\n    return this\r\n  }\r\n\r\n  not<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    operator: FilterOperator,\r\n    value: Row[ColumnName]\r\n  ): this\r\n  not(column: string, operator: string, value: unknown): this\r\n  /**\r\n   * Match only rows which doesn't satisfy the filter.\r\n   *\r\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\r\n   * follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure they are properly sanitized.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param operator - The operator to be negated to filter with, following\r\n   * PostgREST syntax\r\n   * @param value - The value to filter with, following PostgREST syntax\r\n   */\r\n  not(column: string, operator: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `not.${operator}.${value}`)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Match only rows which satisfy at least one of the filters.\r\n   *\r\n   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure it's properly sanitized.\r\n   *\r\n   * It's currently not possible to do an `.or()` filter across multiple tables.\r\n   *\r\n   * @param filters - The filters to use, following PostgREST syntax\r\n   * @param foreignTable - Set this to filter on foreign tables instead of the\r\n   * current table\r\n   */\r\n  or(filters: string, { foreignTable }: { foreignTable?: string } = {}): this {\r\n    const key = foreignTable ? `${foreignTable}.or` : 'or'\r\n    this.url.searchParams.append(key, `(${filters})`)\r\n    return this\r\n  }\r\n\r\n  filter<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    operator: `${'' | 'not.'}${FilterOperator}`,\r\n    value: unknown\r\n  ): this\r\n  filter(column: string, operator: string, value: unknown): this\r\n  /**\r\n   * Match only rows which satisfy the filter. This is an escape hatch - you\r\n   * should use the specific filter methods wherever possible.\r\n   *\r\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\r\n   * follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure they are properly sanitized.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param operator - The operator to filter with, following PostgREST syntax\r\n   * @param value - The value to filter with, following PostgREST syntax\r\n   */\r\n  filter(column: string, operator: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `${operator}.${value}`)\r\n    return this\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}