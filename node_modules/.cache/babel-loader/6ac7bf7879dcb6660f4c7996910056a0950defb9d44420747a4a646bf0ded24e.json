{"ast":null,"code":"import PostgrestQueryBuilder from './PostgrestQueryBuilder';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nimport { DEFAULT_HEADERS } from './constants';\n/**\r\n * PostgREST client.\r\n *\r\n * @typeParam Database - Types for the schema from the [type\r\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\r\n *\r\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\r\n * literal, the same one passed to the constructor. If the schema is not\r\n * `\"public\"`, this must be supplied manually.\r\n */\nexport default class PostgrestClient {\n  // TODO: Add back shouldThrowOnError once we figure out the typings\n  /**\r\n   * Creates a PostgREST client.\r\n   *\r\n   * @param url - URL of the PostgREST endpoint\r\n   * @param options - Named parameters\r\n   * @param options.headers - Custom headers\r\n   * @param options.schema - Postgres schema to switch to\r\n   * @param options.fetch - Custom fetch\r\n   */\n  constructor(url) {\n    let {\n      headers = {},\n      schema,\n      fetch\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schema = schema;\n    this.fetch = fetch;\n  }\n  /**\r\n   * Perform a query on a table or a view.\r\n   *\r\n   * @param relation - The table or view name to query\r\n   */\n  from(relation) {\n    const url = new URL(`${this.url}/${relation}`);\n    return new PostgrestQueryBuilder(url, {\n      headers: Object.assign({}, this.headers),\n      schema: this.schema,\n      fetch: this.fetch\n    });\n  }\n  /**\r\n   * Perform a function call.\r\n   *\r\n   * @param fn - The function name to call\r\n   * @param args - The arguments to pass to the function call\r\n   * @param options - Named parameters\r\n   * @param options.head - When set to `true`, `data` will not be returned.\r\n   * Useful if you only need the count.\r\n   * @param options.count - Count algorithm to use to count rows returned by the\r\n   * function. Only applicable for [set-returning\r\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\n  rpc(fn) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let {\n      head = false,\n      count\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let method;\n    const url = new URL(`${this.url}/rpc/${fn}`);\n    let body;\n    if (head) {\n      method = 'HEAD';\n      Object.entries(args).forEach(_ref => {\n        let [name, value] = _ref;\n        url.searchParams.append(name, `${value}`);\n      });\n    } else {\n      method = 'POST';\n      body = args;\n    }\n    const headers = Object.assign({}, this.headers);\n    if (count) {\n      headers['Prefer'] = `count=${count}`;\n    }\n    return new PostgrestFilterBuilder({\n      method,\n      url,\n      headers,\n      schema: this.schema,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAOA,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,sBAAsB,MAAM,0BAA0B;AAE7D,SAASC,eAAe,QAAQ,aAAa;AAG7C;;;;;;;;;;AAUA,eAAc,MAAOC,eAAe;EAclC;EACA;;;;;;;;;EASAC,YACEC,GAAW,EASL;IAAA,IARN;MACEC,OAAO,GAAG,EAAE;MACZC,MAAM;MACNC;IAAK,wEAKH,EAAE;IAEN,IAAI,CAACH,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,OAAO,mCAAQJ,eAAe,GAAKI,OAAO,CAAE;IACjD,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACpB;EAUA;;;;;EAKAC,IAAI,CAACC,QAAgB;IACnB,MAAML,GAAG,GAAG,IAAIM,GAAG,CAAC,GAAG,IAAI,CAACN,GAAG,IAAIK,QAAQ,EAAE,CAAC;IAC9C,OAAO,IAAIV,qBAAqB,CAAcK,GAAG,EAAE;MACjDC,OAAO,oBAAO,IAAI,CAACA,OAAO,CAAE;MAC5BC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,KAAK,EAAE,IAAI,CAACA;KACb,CAAC;EACJ;EAEA;;;;;;;;;;;;;;;;;;;;;EAqBAI,GAAG,CAIDC,EAAgB,EAQV;IAAA,IAPNC,2EAA0B,EAAE;IAAA,IAC5B;MACEC,IAAI,GAAG,KAAK;MACZC;IAAK,wEAIH,EAAE;IAUN,IAAIC,MAAuB;IAC3B,MAAMZ,GAAG,GAAG,IAAIM,GAAG,CAAC,GAAG,IAAI,CAACN,GAAG,QAAQQ,EAAE,EAAE,CAAC;IAC5C,IAAIK,IAAyB;IAC7B,IAAIH,IAAI,EAAE;MACRE,MAAM,GAAG,MAAM;MACfE,MAAM,CAACC,OAAO,CAACN,IAAI,CAAC,CAACO,OAAO,CAAC,QAAkB;QAAA,IAAjB,CAACC,IAAI,EAAEC,KAAK,CAAC;QACzClB,GAAG,CAACmB,YAAY,CAACC,MAAM,CAACH,IAAI,EAAE,GAAGC,KAAK,EAAE,CAAC;MAC3C,CAAC,CAAC;KACH,MAAM;MACLN,MAAM,GAAG,MAAM;MACfC,IAAI,GAAGJ,IAAI;;IAGb,MAAMR,OAAO,qBAAQ,IAAI,CAACA,OAAO,CAAE;IACnC,IAAIU,KAAK,EAAE;MACTV,OAAO,CAAC,QAAQ,CAAC,GAAG,SAASU,KAAK,EAAE;;IAGtC,OAAO,IAAIf,sBAAsB,CAAC;MAChCgB,MAAM;MACNZ,GAAG;MACHC,OAAO;MACPC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBW,IAAI;MACJV,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBkB,UAAU,EAAE;KACwC,CAAC;EACzD","names":["PostgrestQueryBuilder","PostgrestFilterBuilder","DEFAULT_HEADERS","PostgrestClient","constructor","url","headers","schema","fetch","from","relation","URL","rpc","fn","args","head","count","method","body","Object","entries","forEach","name","value","searchParams","append","allowEmpty"],"sources":["C:\\Users\\recar\\Documents\\GitHub\\TILProject\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestClient.ts"],"sourcesContent":["import PostgrestQueryBuilder from './PostgrestQueryBuilder'\r\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\r\nimport PostgrestBuilder from './PostgrestBuilder'\r\nimport { DEFAULT_HEADERS } from './constants'\r\nimport { Fetch, GenericSchema } from './types'\r\n\r\n/**\r\n * PostgREST client.\r\n *\r\n * @typeParam Database - Types for the schema from the [type\r\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\r\n *\r\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\r\n * literal, the same one passed to the constructor. If the schema is not\r\n * `\"public\"`, this must be supplied manually.\r\n */\r\nexport default class PostgrestClient<\r\n  Database = any,\r\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\r\n    ? 'public'\r\n    : string & keyof Database,\r\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\r\n    ? Database[SchemaName]\r\n    : any\r\n> {\r\n  url: string\r\n  headers: Record<string, string>\r\n  schema?: SchemaName\r\n  fetch?: Fetch\r\n\r\n  // TODO: Add back shouldThrowOnError once we figure out the typings\r\n  /**\r\n   * Creates a PostgREST client.\r\n   *\r\n   * @param url - URL of the PostgREST endpoint\r\n   * @param options - Named parameters\r\n   * @param options.headers - Custom headers\r\n   * @param options.schema - Postgres schema to switch to\r\n   * @param options.fetch - Custom fetch\r\n   */\r\n  constructor(\r\n    url: string,\r\n    {\r\n      headers = {},\r\n      schema,\r\n      fetch,\r\n    }: {\r\n      headers?: Record<string, string>\r\n      schema?: SchemaName\r\n      fetch?: Fetch\r\n    } = {}\r\n  ) {\r\n    this.url = url\r\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\r\n    this.schema = schema\r\n    this.fetch = fetch\r\n  }\r\n\r\n  from<\r\n    TableName extends string & keyof Schema['Tables'],\r\n    Table extends Schema['Tables'][TableName]\r\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table>\r\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\r\n    relation: ViewName\r\n  ): PostgrestQueryBuilder<Schema, View>\r\n  from(relation: string): PostgrestQueryBuilder<Schema, any>\r\n  /**\r\n   * Perform a query on a table or a view.\r\n   *\r\n   * @param relation - The table or view name to query\r\n   */\r\n  from(relation: string): PostgrestQueryBuilder<Schema, any> {\r\n    const url = new URL(`${this.url}/${relation}`)\r\n    return new PostgrestQueryBuilder<Schema, any>(url, {\r\n      headers: { ...this.headers },\r\n      schema: this.schema,\r\n      fetch: this.fetch,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Perform a function call.\r\n   *\r\n   * @param fn - The function name to call\r\n   * @param args - The arguments to pass to the function call\r\n   * @param options - Named parameters\r\n   * @param options.head - When set to `true`, `data` will not be returned.\r\n   * Useful if you only need the count.\r\n   * @param options.count - Count algorithm to use to count rows returned by the\r\n   * function. Only applicable for [set-returning\r\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\r\n  rpc<\r\n    FunctionName extends string & keyof Schema['Functions'],\r\n    Function_ extends Schema['Functions'][FunctionName]\r\n  >(\r\n    fn: FunctionName,\r\n    args: Function_['Args'] = {},\r\n    {\r\n      head = false,\r\n      count,\r\n    }: {\r\n      head?: boolean\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n    } = {}\r\n  ): PostgrestFilterBuilder<\r\n    Schema,\r\n    Function_['Returns'] extends any[]\r\n      ? Function_['Returns'][number] extends Record<string, unknown>\r\n        ? Function_['Returns'][number]\r\n        : never\r\n      : never,\r\n    Function_['Returns']\r\n  > {\r\n    let method: 'HEAD' | 'POST'\r\n    const url = new URL(`${this.url}/rpc/${fn}`)\r\n    let body: unknown | undefined\r\n    if (head) {\r\n      method = 'HEAD'\r\n      Object.entries(args).forEach(([name, value]) => {\r\n        url.searchParams.append(name, `${value}`)\r\n      })\r\n    } else {\r\n      method = 'POST'\r\n      body = args\r\n    }\r\n\r\n    const headers = { ...this.headers }\r\n    if (count) {\r\n      headers['Prefer'] = `count=${count}`\r\n    }\r\n\r\n    return new PostgrestFilterBuilder({\r\n      method,\r\n      url,\r\n      headers,\r\n      schema: this.schema,\r\n      body,\r\n      fetch: this.fetch,\r\n      allowEmpty: false,\r\n    } as unknown as PostgrestBuilder<Function_['Returns']>)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}