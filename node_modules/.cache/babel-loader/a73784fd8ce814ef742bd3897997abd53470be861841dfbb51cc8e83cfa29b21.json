{"ast":null,"code":"import PostgrestBuilder from './PostgrestBuilder';\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n  /**\r\n   * Perform a SELECT on the query result.\r\n   *\r\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\r\n   * return modified rows. By calling this method, modified rows are returned in\r\n   * `data`.\r\n   *\r\n   * @param columns - The columns to retrieve, separated by commas\r\n   */\n  select(columns) {\n    // Remove whitespaces except when quoted\n    let quoted = false;\n    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n    if (this.headers['Prefer']) {\n      this.headers['Prefer'] += ',';\n    }\n    this.headers['Prefer'] += 'return=representation';\n    return this;\n  }\n  /**\r\n   * Order the query result by `column`.\r\n   *\r\n   * You can call this method multiple times to order by multiple columns.\r\n   *\r\n   * You can order foreign tables, but it doesn't affect the ordering of the\r\n   * current table.\r\n   *\r\n   * @param column - The column to order by\r\n   * @param options - Named parameters\r\n   * @param options.ascending - If `true`, the result will be in ascending order\r\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\r\n   * `null`s appear last.\r\n   * @param options.foreignTable - Set this to order a foreign table by foreign\r\n   * columns\r\n   */\n  order(column) {\n    let {\n      ascending = true,\n      nullsFirst,\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = foreignTable ? `${foreignTable}.order` : 'order';\n    const existingOrder = this.url.searchParams.get(key);\n    this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n    return this;\n  }\n  /**\r\n   * Limit the query result by `count`.\r\n   *\r\n   * @param count - The maximum number of rows to return\r\n   * @param options - Named parameters\r\n   * @param options.foreignTable - Set this to limit rows of foreign tables\r\n   * instead of the current table\r\n   */\n  limit(count) {\n    let {\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(key, `${count}`);\n    return this;\n  }\n  /**\r\n   * Limit the query result by `from` and `to` inclusively.\r\n   *\r\n   * @param from - The starting index from which to limit the result\r\n   * @param to - The last index to which to limit the result\r\n   * @param options - Named parameters\r\n   * @param options.foreignTable - Set this to limit rows of foreign tables\r\n   * instead of the current table\r\n   */\n  range(from, to) {\n    let {\n      foreignTable\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(keyOffset, `${from}`);\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n    return this;\n  }\n  /**\r\n   * Set the AbortSignal for the fetch request.\r\n   *\r\n   * @param signal - The AbortSignal to use for the fetch request\r\n   */\n  abortSignal(signal) {\n    this.signal = signal;\n    return this;\n  }\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\r\n   * returns an error.\r\n   */\n  single() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    return this;\n  }\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\r\n   * this returns an error.\r\n   */\n  maybeSingle() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    this.allowEmpty = true;\n    return this;\n  }\n  /**\r\n   * Return `data` as a string in CSV format.\r\n   */\n  csv() {\n    this.headers['Accept'] = 'text/csv';\n    return this;\n  }\n  /**\r\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\r\n   */\n  geojson() {\n    this.headers['Accept'] = 'application/geo+json';\n    return this;\n  }\n  /**\r\n   * Return `data` as the EXPLAIN plan for the query.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.analyze - If `true`, the query will be executed and the\r\n   * actual run time will be returned\r\n   *\r\n   * @param options.verbose - If `true`, the query identifier will be returned\r\n   * and `data` will include the output columns of the query\r\n   *\r\n   * @param options.settings - If `true`, include information on configuration\r\n   * parameters that affect query planning\r\n   *\r\n   * @param options.buffers - If `true`, include information on buffer usage\r\n   *\r\n   * @param options.wal - If `true`, include information on WAL record generation\r\n   *\r\n   * @param options.format - The format of the output, can be `\"text\"` (default)\r\n   * or `\"json\"`\r\n   */\n  explain() {\n    let {\n      analyze = false,\n      verbose = false,\n      settings = false,\n      buffers = false,\n      wal = false,\n      format = 'text'\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|');\n    // An Accept header can carry multiple media types but postgrest-js always sends one\n    const forMediatype = this.headers['Accept'];\n    this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n    if (format === 'json') return this;else return this;\n  }\n  /**\r\n   * Rollback the query.\r\n   *\r\n   * `data` will still be returned, but the query is not committed.\r\n   */\n  rollback() {\n    var _a;\n    if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n      this.headers['Prefer'] += ',tx=rollback';\n    } else {\n      this.headers['Prefer'] = 'tx=rollback';\n    }\n    return this;\n  }\n  /**\r\n   * Override the type of the returned `data`.\r\n   *\r\n   * @typeParam NewResult - The new result type to override with\r\n   */\n  returns() {\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["PostgrestBuilder","PostgrestTransformBuilder","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","order","column","ascending","nullsFirst","foreignTable","key","existingOrder","get","undefined","limit","count","range","from","to","keyOffset","keyLimit","abortSignal","signal","single","maybeSingle","allowEmpty","csv","geojson","explain","analyze","verbose","settings","buffers","wal","format","options","filter","Boolean","forMediatype","rollback","trim","length","returns"],"sources":["C:\\Users\\recar\\Documents\\GitHub\\TILProject\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestTransformBuilder.ts"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder'\r\nimport { GetResult } from './select-query-parser'\r\nimport {\r\n  GenericSchema,\r\n  PostgrestMaybeSingleResponse,\r\n  PostgrestResponse,\r\n  PostgrestSingleResponse,\r\n} from './types'\r\n\r\nexport default class PostgrestTransformBuilder<\r\n  Schema extends GenericSchema,\r\n  Row extends Record<string, unknown>,\r\n  Result\r\n> extends PostgrestBuilder<Result> {\r\n  /**\r\n   * Perform a SELECT on the query result.\r\n   *\r\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\r\n   * return modified rows. By calling this method, modified rows are returned in\r\n   * `data`.\r\n   *\r\n   * @param columns - The columns to retrieve, separated by commas\r\n   */\r\n  select<Query extends string = '*', NewResult = GetResult<Schema, Row, Query>>(\r\n    columns?: Query\r\n  ): PostgrestTransformBuilder<Schema, Row, NewResult> {\r\n    // Remove whitespaces except when quoted\r\n    let quoted = false\r\n    const cleanedColumns = (columns ?? '*')\r\n      .split('')\r\n      .map((c) => {\r\n        if (/\\s/.test(c) && !quoted) {\r\n          return ''\r\n        }\r\n        if (c === '\"') {\r\n          quoted = !quoted\r\n        }\r\n        return c\r\n      })\r\n      .join('')\r\n    this.url.searchParams.set('select', cleanedColumns)\r\n    if (this.headers['Prefer']) {\r\n      this.headers['Prefer'] += ','\r\n    }\r\n    this.headers['Prefer'] += 'return=representation'\r\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResult>\r\n  }\r\n\r\n  order<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: undefined }\r\n  ): this\r\n  order(\r\n    column: string,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable: string }\r\n  ): this\r\n  /**\r\n   * Order the query result by `column`.\r\n   *\r\n   * You can call this method multiple times to order by multiple columns.\r\n   *\r\n   * You can order foreign tables, but it doesn't affect the ordering of the\r\n   * current table.\r\n   *\r\n   * @param column - The column to order by\r\n   * @param options - Named parameters\r\n   * @param options.ascending - If `true`, the result will be in ascending order\r\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\r\n   * `null`s appear last.\r\n   * @param options.foreignTable - Set this to order a foreign table by foreign\r\n   * columns\r\n   */\r\n  order(\r\n    column: string,\r\n    {\r\n      ascending = true,\r\n      nullsFirst,\r\n      foreignTable,\r\n    }: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string } = {}\r\n  ): this {\r\n    const key = foreignTable ? `${foreignTable}.order` : 'order'\r\n    const existingOrder = this.url.searchParams.get(key)\r\n\r\n    this.url.searchParams.set(\r\n      key,\r\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${\r\n        nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'\r\n      }`\r\n    )\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Limit the query result by `count`.\r\n   *\r\n   * @param count - The maximum number of rows to return\r\n   * @param options - Named parameters\r\n   * @param options.foreignTable - Set this to limit rows of foreign tables\r\n   * instead of the current table\r\n   */\r\n  limit(count: number, { foreignTable }: { foreignTable?: string } = {}): this {\r\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\r\n    this.url.searchParams.set(key, `${count}`)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Limit the query result by `from` and `to` inclusively.\r\n   *\r\n   * @param from - The starting index from which to limit the result\r\n   * @param to - The last index to which to limit the result\r\n   * @param options - Named parameters\r\n   * @param options.foreignTable - Set this to limit rows of foreign tables\r\n   * instead of the current table\r\n   */\r\n  range(from: number, to: number, { foreignTable }: { foreignTable?: string } = {}): this {\r\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`\r\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\r\n    this.url.searchParams.set(keyOffset, `${from}`)\r\n    // Range is inclusive, so add 1\r\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Set the AbortSignal for the fetch request.\r\n   *\r\n   * @param signal - The AbortSignal to use for the fetch request\r\n   */\r\n  abortSignal(signal: AbortSignal): this {\r\n    this.signal = signal\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\r\n   * returns an error.\r\n   */\r\n  single(): PromiseLike<PostgrestSingleResponse<Result>> {\r\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\r\n    return this as PromiseLike<PostgrestSingleResponse<Result>>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\r\n   * this returns an error.\r\n   */\r\n  maybeSingle(): PromiseLike<PostgrestMaybeSingleResponse<Result>> {\r\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\r\n    this.allowEmpty = true\r\n    return this as PromiseLike<PostgrestMaybeSingleResponse<Result>>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a string in CSV format.\r\n   */\r\n  csv(): PromiseLike<PostgrestSingleResponse<string>> {\r\n    this.headers['Accept'] = 'text/csv'\r\n    return this as PromiseLike<PostgrestSingleResponse<string>>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\r\n   */\r\n  geojson(): PromiseLike<PostgrestSingleResponse<Record<string, unknown>>> {\r\n    this.headers['Accept'] = 'application/geo+json'\r\n    return this as PromiseLike<PostgrestSingleResponse<Record<string, unknown>>>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as the EXPLAIN plan for the query.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.analyze - If `true`, the query will be executed and the\r\n   * actual run time will be returned\r\n   *\r\n   * @param options.verbose - If `true`, the query identifier will be returned\r\n   * and `data` will include the output columns of the query\r\n   *\r\n   * @param options.settings - If `true`, include information on configuration\r\n   * parameters that affect query planning\r\n   *\r\n   * @param options.buffers - If `true`, include information on buffer usage\r\n   *\r\n   * @param options.wal - If `true`, include information on WAL record generation\r\n   *\r\n   * @param options.format - The format of the output, can be `\"text\"` (default)\r\n   * or `\"json\"`\r\n   */\r\n  explain({\r\n    analyze = false,\r\n    verbose = false,\r\n    settings = false,\r\n    buffers = false,\r\n    wal = false,\r\n    format = 'text',\r\n  }: {\r\n    analyze?: boolean\r\n    verbose?: boolean\r\n    settings?: boolean\r\n    buffers?: boolean\r\n    wal?: boolean\r\n    format?: 'json' | 'text'\r\n  } = {}):\r\n    | PromiseLike<PostgrestResponse<Record<string, unknown>>>\r\n    | PromiseLike<PostgrestSingleResponse<string>> {\r\n    const options = [\r\n      analyze ? 'analyze' : null,\r\n      verbose ? 'verbose' : null,\r\n      settings ? 'settings' : null,\r\n      buffers ? 'buffers' : null,\r\n      wal ? 'wal' : null,\r\n    ]\r\n      .filter(Boolean)\r\n      .join('|')\r\n    // An Accept header can carry multiple media types but postgrest-js always sends one\r\n    const forMediatype = this.headers['Accept']\r\n    this.headers[\r\n      'Accept'\r\n    ] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`\r\n    if (format === 'json') return this as PromiseLike<PostgrestResponse<Record<string, unknown>>>\r\n    else return this as PromiseLike<PostgrestSingleResponse<string>>\r\n  }\r\n\r\n  /**\r\n   * Rollback the query.\r\n   *\r\n   * `data` will still be returned, but the query is not committed.\r\n   */\r\n  rollback(): this {\r\n    if ((this.headers['Prefer'] ?? '').trim().length > 0) {\r\n      this.headers['Prefer'] += ',tx=rollback'\r\n    } else {\r\n      this.headers['Prefer'] = 'tx=rollback'\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Override the type of the returned `data`.\r\n   *\r\n   * @typeParam NewResult - The new result type to override with\r\n   */\r\n  returns<NewResult>(): PostgrestTransformBuilder<Schema, Row, NewResult> {\r\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResult>\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}