{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nexport default class StorageBucketApi {\n  constructor(url) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let fetch = arguments.length > 2 ? arguments[2] : undefined;\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\r\n   * Retrieves the details of all Storage buckets within an existing project.\r\n   */\n  listBuckets() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Retrieves the details of an existing Storage bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to retrieve.\r\n   */\n  getBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket/${id}`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Creates a new Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are creating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\r\n   * @returns newly created bucket id\r\n   */\n  createBucket(id) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      public: false\n    };\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket`, {\n          id,\n          name: id,\n          public: options.public\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Updates a Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are updating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\r\n   */\n  updateBucket(id, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n          id,\n          name: id,\n          public: options.public\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Removes all objects inside a single bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to empty.\r\n   */\n  emptyBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\r\n   * You must first `empty()` the bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to delete.\r\n   */\n  deleteBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["DEFAULT_HEADERS","isStorageError","get","post","put","remove","resolveFetch","StorageBucketApi","constructor","url","headers","fetch","listBuckets","data","error","getBucket","id","createBucket","options","public","name","updateBucket","emptyBucket","deleteBucket"],"sources":["C:\\Users\\recar\\Documents\\GitHub\\TILProject\\node_modules\\@supabase\\storage-js\\src\\packages\\StorageBucketApi.ts"],"sourcesContent":["import { DEFAULT_HEADERS } from '../lib/constants'\r\nimport { isStorageError, StorageError } from '../lib/errors'\r\nimport { Fetch, get, post, put, remove } from '../lib/fetch'\r\nimport { resolveFetch } from '../lib/helpers'\r\nimport { Bucket } from '../lib/types'\r\n\r\nexport default class StorageBucketApi {\r\n  protected url: string\r\n  protected headers: { [key: string]: string }\r\n  protected fetch: Fetch\r\n\r\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\r\n    this.url = url\r\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\r\n    this.fetch = resolveFetch(fetch)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the details of all Storage buckets within an existing project.\r\n   */\r\n  async listBuckets(): Promise<\r\n    | {\r\n        data: Bucket[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the details of an existing Storage bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to retrieve.\r\n   */\r\n  async getBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: Bucket\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are creating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\r\n   * @returns newly created bucket id\r\n   */\r\n  async createBucket(\r\n    id: string,\r\n    options: { public: boolean } = { public: false }\r\n  ): Promise<\r\n    | {\r\n        data: Pick<Bucket, 'name'>\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/bucket`,\r\n        { id, name: id, public: options.public },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates a Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are updating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\r\n   */\r\n  async updateBucket(\r\n    id: string,\r\n    options: { public: boolean }\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await put(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}`,\r\n        { id, name: id, public: options.public },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all objects inside a single bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to empty.\r\n   */\r\n  async emptyBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}/empty`,\r\n        {},\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\r\n   * You must first `empty()` the bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to delete.\r\n   */\r\n  async deleteBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await remove(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}`,\r\n        {},\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}