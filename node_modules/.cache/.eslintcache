[{"C:\\Users\\recar\\Documents\\GitHub\\TILProject\\src\\index.js":"1","C:\\Users\\recar\\Documents\\GitHub\\TILProject\\src\\App.js":"2","C:\\Users\\recar\\Documents\\GitHub\\TILProject\\src\\supabase.js":"3"},{"size":242,"mtime":1672241977195,"results":"4","hashOfConfig":"5"},{"size":8211,"mtime":1672241977194,"results":"6","hashOfConfig":"5"},{"size":436,"mtime":1672245268060,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"15zj6l8",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"11"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\recar\\Documents\\GitHub\\TILProject\\src\\index.js",[],[],[],"C:\\Users\\recar\\Documents\\GitHub\\TILProject\\src\\App.js",["19","20","21","22"],[],"import { useEffect, useState } from \"react\";\r\nimport supabase from \"./supabase\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst initialFacts = [\r\n  {\r\n    id: 1,\r\n    text: \"React is being developed by Meta (formerly facebook)\",\r\n    source: \"https://opensource.fb.com/\",\r\n    category: \"technology\",\r\n    votesInteresting: 24,\r\n    votesMindblowing: 9,\r\n    votesFalse: 4,\r\n    createdIn: 2021,\r\n  },\r\n  {\r\n    id: 2,\r\n    text: \"Millennial dads spend 3 times as much time with their kids than their fathers spent with them. In 1982, 43% of fathers had never changed a diaper. Today, that number is down to 3%\",\r\n    source:\r\n      \"https://www.mother.ly/parenting/millennial-dads-spend-more-time-with-their-kids\",\r\n    category: \"society\",\r\n    votesInteresting: 11,\r\n    votesMindblowing: 2,\r\n    votesFalse: 0,\r\n    createdIn: 2019,\r\n  },\r\n  {\r\n    id: 3,\r\n    text: \"Lisbon is the capital of Portugal\",\r\n    source: \"https://en.wikipedia.org/wiki/Lisbon\",\r\n    category: \"society\",\r\n    votesInteresting: 8,\r\n    votesMindblowing: 3,\r\n    votesFalse: 1,\r\n    createdIn: 2015,\r\n  },\r\n];\r\n\r\n/////////////////////////////////////////\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n  return (\r\n    <div>\r\n      <span style={{ fontSize: \"40px\" }}>{count}</span>\r\n      <button className=\"btn btn-large\" onClick={() => setCount((c) => c + 1)}>\r\n        +!\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [facts, setFacts] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [currentCategory, setCurrentCategory] = useState(\"all\");\r\n\r\n  useEffect(\r\n    function () {\r\n      async function getFacts() {\r\n        setIsLoading(true);\r\n\r\n        let query = supabase.from(\"facts\").select(\"*\");\r\n\r\n        if (currentCategory !== \"all\")\r\n          query = query.eq(\"category\", currentCategory);\r\n\r\n        const { data: facts, error } = await query\r\n          .order(\"votesInteresting\", { ascending: false })\r\n          .limit(1000);\r\n\r\n        if (!error) setFacts(facts);\r\n        else alert(\"There was an error loading the data.\");\r\n        setIsLoading(false);\r\n      }\r\n      getFacts();\r\n    },\r\n    [currentCategory]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Header showForm={showForm} setShowForm={setShowForm} />\r\n\r\n      {showForm ? (\r\n        <NewFactForm setFacts={setFacts} setShowForm={setShowForm} />\r\n      ) : null}\r\n\r\n      <main className=\"main\">\r\n        <CategoryFilter setCurrentCategory={setCurrentCategory} />\r\n\r\n        {isLoading ? <LoadScreen /> : <FactList facts={facts} />}\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction LoadScreen() {\r\n  return <p className=\"msg\">Loading. . .</p>;\r\n}\r\n\r\nfunction Header({ showForm, setShowForm }) {\r\n  const appTitle = \"Today I Learned\";\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"logo\">\r\n        <img src=\"logo.png\" height=\"68\" width=\"68\" alt=\"Today I Learned Logo\" />\r\n        <h1>{appTitle}</h1>\r\n      </div>\r\n\r\n      <button\r\n        className=\"btn btn-large share-button\"\r\n        onClick={() => setShowForm((show) => !show)}\r\n      >\r\n        {showForm ? \"Close\" : \"Share a fact!\"}\r\n      </button>\r\n    </header>\r\n  );\r\n}\r\n\r\nconst CATEGORIES = [\r\n  { name: \"technology\", color: \"#3b82f6\" },\r\n  { name: \"science\", color: \"#16a34a\" },\r\n  { name: \"finance\", color: \"#ef4444\" },\r\n  { name: \"society\", color: \"#eab308\" },\r\n  { name: \"entertainment\", color: \"#db2777\" },\r\n  { name: \"health\", color: \"#14b8a6\" },\r\n  { name: \"history\", color: \"#f97316\" },\r\n  { name: \"news\", color: \"#8b5cf6\" },\r\n];\r\n\r\nfunction isValidHttpUrl(string) {\r\n  let url;\r\n  try {\r\n    url = new URL(string);\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n  return url.protocol === \"http:\" || url.protocol === \"https:\";\r\n}\r\n\r\nfunction NewFactForm({ setFacts, setShowForm }) {\r\n  const [text, setText] = useState(\"\");\r\n  const [source, setSource] = useState(\"http://example.com\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const textLength = text.length;\r\n\r\n  async function handleSubmit(e) {\r\n    // 1. Prevent browser reload\r\n    e.preventDefault();\r\n    console.log(text, source, category);\r\n    // 2. Check if the data is valid. If so, create a new fact\r\n    if (text && isValidHttpUrl(source) && category && text.length <= 200) {\r\n      // 3. Create a new fact object (Not needed once we get to Step 7)\r\n      // const newFact = {\r\n      //   id: Math.round(Math.random() * 100),\r\n      //   text,\r\n      //   source,\r\n      //   category,\r\n      //   votesInteresting: 0,\r\n      //   votesMindblowing: 0,\r\n      //   votesFalse: 0,\r\n      //   createdIn: new Date().getFullYear(),\r\n      // };\r\n      // 7. Upload NEW facts to Supabase\r\n      setIsUploading(true);\r\n      const { data: newFact, error } = await supabase\r\n        .from(\"facts\")\r\n        .insert([{ text, source, category }])\r\n        .select();\r\n      setIsUploading(false);\r\n      // console.log(newFact);\r\n      // 4. Add the new fact to the UI/add the fact to state\r\n      setFacts((facts) => [newFact[0], ...facts]);\r\n      // 5. Reset input fields\r\n      setText(\"\");\r\n      setSource(\"\");\r\n      setCategory(\"\");\r\n      // 6. Close the form\r\n      setShowForm(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"fact-form\" onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Share a fact with the world\"\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n      />\r\n      <span>{200 - text.length}</span>\r\n      <input\r\n        value={source}\r\n        type=\"text\"\r\n        placeholder=\"Trustworthy source\"\r\n        onChange={(e) => setSource(e.target.value)}\r\n        disabled={isUploading}\r\n      />\r\n      <select\r\n        value={category}\r\n        onChange={(e) => setCategory(e.target.value)}\r\n        disabled={isUploading}\r\n      >\r\n        <option value=\"\" placeholder=\"Share a fact with the world\">\r\n          Choose a category\r\n        </option>\r\n        {CATEGORIES.map((cat) => (\r\n          <option key={cat.name} value={cat.name}>\r\n            {cat.name.toUpperCase()}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button className=\"btn btn-large\" disabled={isUploading}>\r\n        Post\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction CategoryFilter({ setCurrentCategory }) {\r\n  return (\r\n    <aside>\r\n      <ul>\r\n        <li className=\"category\">\r\n          <button\r\n            class=\"btn btn-all-categories\"\r\n            onClick={() => setCurrentCategory(\"all\")}\r\n          >\r\n            All\r\n          </button>\r\n        </li>\r\n\r\n        {CATEGORIES.map((cat) => (\r\n          <li key={cat.name} className=\"category\">\r\n            <button\r\n              className=\"btn btn-category\"\r\n              style={{ backgroundColor: cat.color }}\r\n              onClick={() => setCurrentCategory(cat.name)}\r\n            >\r\n              {cat.name}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </aside>\r\n  );\r\n}\r\n\r\nfunction FactList({ facts }) {\r\n  if (facts.length === 0) {\r\n    return (\r\n      <p className=\"msg\">\r\n        There are no facts for this category yet. Try adding one!\r\n      </p>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <ul className=\"facts-list\">\r\n        {facts.map((fact) => (\r\n          <Fact key={fact.id} fact={fact} />\r\n        ))}\r\n      </ul>\r\n      <p>\r\n        There are {facts.length} facts in the database. Add your own and help it\r\n        grow!\r\n      </p>\r\n    </section>\r\n  );\r\n}\r\n\r\nfunction Fact({ fact }) {\r\n  return (\r\n    <li className=\"fact\">\r\n      <p>\r\n        {fact.text}\r\n        <a className=\"source\" href={fact.source} /*target=\"_blank\"*/>\r\n          (Source)\r\n        </a>\r\n      </p>\r\n      <span\r\n        className=\"tag\"\r\n        style={{\r\n          backgroundColor: CATEGORIES.find((cat) => cat.name === fact.category)\r\n            .color,\r\n        }}\r\n      >\r\n        {fact.category}\r\n      </span>\r\n      <div className=\"vote-buttons\">\r\n        <button>üëç {fact.votesInteresting}</button>\r\n        <button>ü§Ø {fact.votesMindblowing}</button>\r\n        <button>‚õîÔ∏è {fact.votesFalse}</button>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\recar\\Documents\\GitHub\\TILProject\\src\\supabase.js",[],[],{"ruleId":"23","severity":1,"message":"24","line":6,"column":7,"nodeType":"25","messageId":"26","endLine":6,"endColumn":19},{"ruleId":"23","severity":1,"message":"27","line":41,"column":10,"nodeType":"25","messageId":"26","endLine":41,"endColumn":17},{"ruleId":"23","severity":1,"message":"28","line":149,"column":9,"nodeType":"25","messageId":"26","endLine":149,"endColumn":19},{"ruleId":"23","severity":1,"message":"29","line":170,"column":30,"nodeType":"25","messageId":"26","endLine":170,"endColumn":35},"no-unused-vars","'initialFacts' is assigned a value but never used.","Identifier","unusedVar","'Counter' is defined but never used.","'textLength' is assigned a value but never used.","'error' is assigned a value but never used."]